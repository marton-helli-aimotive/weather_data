[project]
name = "weather-pipeline"
version = "0.1.0"
description = "Advanced Weather Data Engineering Pipeline"
authors = [
    { name = "Weather Pipeline Team", email = "team@example.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.10"
keywords = ["weather", "data-engineering", "async", "pipeline"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
]

dependencies = [
    # Core async libraries
    "aiohttp>=3.9.0",
    "httpx>=0.27.0",
    "asyncio-throttle>=1.0.2",
    
    # Data validation and models
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Data processing
    "polars>=0.20.0",
    "pandas>=2.2.0",
    "numpy>=1.24.0",
    "pyarrow>=15.0.0",
    
    # Database and storage
    "duckdb>=0.10.0",
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    
    # Web framework and dashboard
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.27.0",
    "dash>=2.16.0",
    
    # Visualization
    "plotly>=5.18.0",
    "altair>=5.2.0",
    "folium>=0.15.0",
    
    # Caching and performance
    "redis>=5.0.0",
    "diskcache>=5.6.0",
    
    # Geospatial processing
    "geopandas>=0.14.0",
    "shapely>=2.0.0",
    
    # Time series and statistics
    "statsmodels>=0.14.0",
    "scikit-learn>=1.4.0",
    
    # Logging and monitoring
    "structlog>=24.1.0",
    "prometheus-client>=0.20.0",
    
    # Configuration and utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.12.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "hypothesis>=6.98.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.5.0",
    
    # Code quality
    "ruff>=0.2.0",
    "black>=24.1.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    
    # Type stubs
    "types-redis>=4.6.0",
    "types-requests>=2.31.0",
    "pandas-stubs>=2.1.0",
    
    # Development tools
    "ipython>=8.21.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
weather-pipeline = "weather_pipeline.cli:main"

[project.urls]
Homepage = "https://github.com/example/weather-pipeline"
Repository = "https://github.com/example/weather-pipeline.git"
Documentation = "https://weather-pipeline.readthedocs.io"
Issues = "https://github.com/example/weather-pipeline/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.gitignore",
    "/.pre-commit-config.yaml",
]

[tool.hatch.build.targets.wheel]
packages = ["src/weather_pipeline"]

# Tool configurations

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.isort]
known-first-party = ["weather_pipeline"]

[tool.black]
target-version = ['py310']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
    -ra
    --strict-markers
    --strict-config
    --cov=weather_pipeline
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
"""
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["weather_pipeline"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
